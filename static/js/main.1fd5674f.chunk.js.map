{"version":3,"sources":["reportWebVitals.js","helper/Utility.js","components/Quote/Quote.js","components/QuoteForm/QuoteForm.js","components/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addDays","date","days","copy","Date","Number","setDate","getDate","getMonthName","num","randomNumber","min","max","Math","floor","random","validateString","str","test","Quote","props","useState","minRange","setMinRange","maxRange","setMaxRange","minDate","setMinDate","maxDate","setMaxDate","useEffect","deliveryRange","freightType","today","minNewDate","maxNewDate","getMonth","deliveryDates","className","show","icon","faShip","faPlane","originCountry","faArrowRight","destinationCountry","freightCost","Intl","NumberFormat","format","QuoteForm","setFreightCost","setFreightType","setOriginCountry","setDestinationCountry","inputError","setInputError","handleClick","e","target","setSelectionRange","value","length","handleKeyPress","key","submitQuoteForm","validateForm","onSubmitForm","htmlFor","id","required","onChange","onKeyPress","onClick","App","showQuote","setShowQuote","Fragment","oCountry","dCountry","fCost","fType","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fd5674f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n/* RECEIVES A DATE AND A NUMBER OF DAYS AND RETURNS THE DATE + THE NUMBER OF DAYS */\nexport const addDays = (date, days) => {\n  const copy = new Date(Number(date))\n  copy.setDate(date.getDate() + days)\n  return copy\n}\n\n/* RECEIVES NUM AND RETURNS CORRESPONDING MONTH NAME */ \nexport const getMonthName = (num) => {\n  const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  return month[num];\n}\n\n/* RECEIVES A MIN AND MAX VALUES AND RETURNS A RANDOM NUMBER BETWEEN THE PROVIDED RANGE */\nexport const randomNumber = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/* RECEIVES A NUMBER TO FORMAT AS CURRENCY */\nexport const numberAsCurrency = (num) => {\n  return Intl.NumberFormat('en-US').format(num);\n}\n\n/* VALIDATES IF POSITIVE NUMBER */\nexport const validateNumber = (num) => {\n  return num > 0;\n}\n\n/* VALIDATES IF STRING ONLY CONTAINS LETTERS AND SPACES */\nexport const validateString = (str) => {\n  return /^[a-z][a-z\\s]*$/i.test(str);\n}\n\n","import React, { useState, useEffect } from 'react';\nimport './Quote.css';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlane, faShip, faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { addDays, getMonthName, numberAsCurrency, randomNumber} from '../../helper/Utility'\n\nconst Quote = (props) => {\n  const [minRange, setMinRange] = useState(0);\n  const [maxRange, setMaxRange] = useState(0);\n  const [minDate, setMinDate] = useState('');\n  const [maxDate, setMaxDate] = useState('');\n\n  useEffect(() => {\n    deliveryRange(props.freightType);   \n  }, [props.freightType]);\n\n  const deliveryDates = (min, max) => {\n    const today = new Date();\n    const minNewDate = addDays(today, min);\n    const maxNewDate = addDays(today, max);\n    setMinDate(getMonthName(minNewDate.getMonth()) + ' ' + minNewDate.getDate());\n    setMaxDate(getMonthName(maxNewDate.getMonth()) + ' ' + maxNewDate.getDate());\n  }\n\n  const deliveryRange = (freightType) => {\n    let min, max;\n    if(freightType === \"ocean\") {\n      min = randomNumber(25, 30);\n      max = randomNumber(min + 5, min + 10);\n    } else if (freightType === \"air\") {\n      min = randomNumber(3, 7);\n      max = randomNumber(min + 2, min + 4);\n    }\n    setMinRange(min);\n    setMaxRange(max);\n    deliveryDates(min, max);\n  }\n\n  return (\n    <div className={props.show ? \"quote-container visible\" : \"quote-container invisible\"}>\n      <div className=\"left-panel\">\n        <div className=\"freight-type\">\n          <FontAwesomeIcon className=\"freight-type-icon\" icon={ props.freightType === \"ocean\" ? faShip : faPlane } />\n          <span>Traditional {props.freightType} freight</span>\n        </div>\n        <div className=\"freight-details\">\n          <p className=\"days-number\">\n            {minRange}-{maxRange} days\n          </p>\n          <p>Estimated delivery</p>\n          <p className=\"dates\">\n            {minDate} - {maxDate}\n          </p>\n        </div>\n      </div>\n      <div className=\"right-panel\">\n        <div className=\"countries-header center-content\">\n          {props.originCountry} <FontAwesomeIcon icon={ faArrowRight }/> {props.destinationCountry}\n        </div>\n        <div className=\"quote-total center-content\">\n          US$ {numberAsCurrency(props.freightCost)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Quote","import React, { useState } from 'react';\nimport './QuoteForm.css';\nimport { validateNumber, validateString } from '../../helper/Utility'\n\nconst QuoteForm = (props) => {  \n  const [freightCost, setFreightCost] = useState(0);\n  const [freightType, setFreightType] = useState('ocean');\n  const [originCountry, setOriginCountry] = useState('');\n  const [destinationCountry, setDestinationCountry] = useState('');\n  const [inputError, setInputError] = useState('');\n\n  const handleClick = (e) => {\n    e.target.setSelectionRange(0, e.target.value.length);\n  }\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      submitQuoteForm();\n    }\n  }\n\n  const submitQuoteForm = () => {\n    if (!validateForm()) return false;\n    props.onSubmitForm(originCountry, destinationCountry, freightCost, freightType);\n  }\n\n  const validateForm = () => {\n    if (validateString(originCountry) \n          && validateString(destinationCountry) \n          && validateNumber(freightCost)) {\n      setInputError('');\n      return true\n    }\n    setInputError('Invalid or incomplete inputs');\n    return false\n  }\n\n  return (\n    <div className=\"quote-form\">\n      <label htmlFor=\"starting-country\">Starting country</label>\n      <input id=\"starting-country\" required\n        onChange={(e) => setOriginCountry(e.target.value)} \n        onKeyPress={handleKeyPress} \n        onClick={handleClick}\n      />\n      <label htmlFor=\"destination-country\">Destination country</label>\n      <input id=\"destination-country\" required\n        onChange={(e) => setDestinationCountry(e.target.value)} \n        onKeyPress={handleKeyPress} \n        onClick={handleClick}\n      />\n      <label htmlFor=\"quote-price\">Quote Price</label>\n      <input id=\"quote-price\" required\n        onChange={(e) => setFreightCost(e.target.value)} \n        onKeyPress={handleKeyPress} \n        onClick={handleClick} \n      />\n      <label htmlFor=\"shipping-channel\">Shipping channel</label>\n      <select id=\"shipping-channel\" required\n        onChange={(e) => setFreightType(e.target.value)}\n      >\n        <option value=\"ocean\">Ocean</option>\n        <option value=\"air\">Air</option>\n      </select>\n      <span>{inputError}</span>\n      <a className=\"quote-button\" onClick={() => submitQuoteForm() }>Create quote</a>\n    </div>\n  );\n}\n\nexport default QuoteForm;","import React, { useState } from 'react';\nimport Quote from './Quote/Quote';\nimport QuoteForm from './QuoteForm/QuoteForm';\n\nconst App = () => {\n  const [freightType, setFreightType] = useState('');\n  const [freightCost, setFreightCost] = useState(0);\n  const [originCountry, setOriginCountry] = useState('');\n  const [destinationCountry, setDestinationCountry] = useState('');\n  const [showQuote, setShowQuote] = useState(false);\n\n  const submitForm = (oCountry, dCountry, fCost, fType) => {\n    setOriginCountry(oCountry);\n    setDestinationCountry(dCountry);\n    setFreightCost(fCost);\n    setFreightType(fType);\n    setShowQuote(true);\n  }\n\n  return (\n    <React.Fragment>\n      <QuoteForm \n        onSubmitForm = {submitForm}\n      />\n      <Quote\n        freightType = {freightType}\n        freightCost = {freightCost}\n        originCountry = {originCountry}\n        destinationCountry = {destinationCountry}\n        show = {showQuote}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}